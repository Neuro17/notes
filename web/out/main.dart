// Auto-generated from main.html.
// DO NOT EDIT.

library main;

import 'dart:html' as autogenerated_html;
import 'dart:web_audio' as autogenerated_audio;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;

import 'dart:html';

import '../model.dart';

import 'package:web_ui/web_ui.dart';

import 'todo_row.html.dart';


// Original code
main() {
  // listen on changes to #hash in the URL
  // Note: listen on both popState and hashChange, because IE9 doens't support
  // history API, and it doesn't work properly on Opera 12.
  // See http://dartbug.com/5483
  updateFilters(e) {
    viewModel.showIncomplete = window.location.hash != '#/completed';
//    viewModel.showDone = window.location.hash != '#/active';
    dispatch();
  }
  window.on.hashChange.add(updateFilters);
  window.on.popState.add(updateFilters);
}

void addTodo(Event e) {
  e.preventDefault(); // don't submit the form
  var input = query('#new-todo');
  var titolo = query('#new-titolo');
  if ((input.value == '')||(titolo.value == '')) return;
  app.links.add(new Link(input.value, titolo.value));
  input.value = '';
  titolo.value = '';
}


// Additional generated code
/** Create the views and bind them to models. */
void init_autogenerated() {
  var _root = autogenerated_html.document.body;
  autogenerated_html.Element __todoapp;
  
  autogenerated_html.Element __header;
  
  autogenerated_html.InputElement __newTodo;
  
  autogenerated_html.InputElement __newTitolo;
  
  autogenerated_html.ButtonElement __e0;
  
  autogenerated_html.EventListener __listener__e0_click_1;
  
  autogenerated_html.Element __main;
  
  autogenerated_html.UListElement __todoList;
  
  autogenerated_html.UnknownElement __e2;
  
  List<autogenerated.WatcherDisposer> __stoppers2;
  
  List<Function> _removeChild__e2 = [];
  
  autogenerated_html.Node _endPosition__e2;
  


  // Initialize fields.
  __todoapp = _root.query('#todoapp');
  __header = __todoapp.query('#header');
  __newTodo = __header.query('#new-todo');
  __newTitolo = __header.query('#new-titolo');
  __e0 = __header.query('#__e-0');
  __main = __todoapp.query('#main');
  __todoList = __main.query('#todo-list');
  __e2 = __todoList.query('#__e-2');
  __stoppers2 = [];
  

  // Attach model to views.
  __listener__e0_click_1 = ($event) {
    addTodo($event);
    autogenerated.dispatch();
  };
  __e0.on.click.add(__listener__e0_click_1);
  
  _endPosition__e2 = __e2;
  
  __stoppers2.add(autogenerated.watchAndInvoke(() => app.links, (_) {
    for (var remover in _removeChild__e2) remover();
    _removeChild__e2.clear();
    
    _endPosition__e2 = autogenerated.removeNodes(__e2, _endPosition__e2);
    
    var __insert___e2 = __e2.nextNode;
    
    for (var x in app.links) {
      
      autogenerated_html.UnknownElement __e1;
      List<autogenerated.WatcherDisposer> __stoppers3_1;
      
      __e1 = new autogenerated_html.Element.html('<x-todo-row> </x-todo-row>');
      __stoppers3_1 = [];
      new TodoRow.forElement(__e1)
      ..created_autogenerated()
      ..created()
      ..composeChildren();
      
      autogenerated.insertAllBefore(__e2.parentNode, __insert___e2,
      
      [new autogenerated_html.Text('\n          \n            '), __e1, _endPosition__e2 = new autogenerated_html.Text('\n          \n            \n        ')]);
      
      __stoppers3_1.add(autogenerated.watchAndInvoke(() => x, (__e) { __e1.xtag.link = __e.newValue; }));
      __e1.xtag..inserted()
      ..inserted_autogenerated();
      
      _removeChild__e2.add(() {
        
        __e1.xtag..removed_autogenerated()
        ..removed();
        (__stoppers3_1..forEach((s) => s())).clear();
        __e1 = null;
        
      });
    }
  }));
  

}
